
- TODO:
	+ JULIA_GIT_VER=$(shell git log -1 --format="%h")
		- Have short SHA in tarball name.
		- Think don't even need git backup zip just tarball because it have
			short SHA in name and if you realy need git for something use
			that short SHA and clone that commit.
		- JULIA_VER
	- SITE_DATE=backup date and time
	- BUILD_PLATFORM=$(shell uname -s)
	- BUILD_PLACE=$(shell uname -n)
	- BUILD_DATE=build end date and time
	- BUILD_VER=${JULIA_GIT_VER}-${BUILD_PLATFORM}-${BUILD_PLACE}-${BUILD_DATE}
	- julia_in_one_file.cpp:
		+ KGB
			- Add verbose flag.
			- Ident code.
			- Give up from KGB, too slow, using zip, faster even than bz2.
		- libz.a/zlib.h
			- Doing all in memory.
			- List all files in zip.
			- Unpack specific file.
		- separate root, libc, version info
		- flags 
			- choose libc
			- print version info
				Julia source git commit: ${JULIA_GIT_VER}
				Build platform: ${BUILD_PLATFORM}
				Build place: ${BUILD_PLACE}
				Build date: ${BUILD_DATE}
				Julia site date: ${SITE_DATE}
	- build libc
		- Before that make statistic which one libc is where.
	- julia_in_one_file dir:
		Makefile
		config/
			Make.user # Without prefix.
			update_repo.jl
		src/
			kgb.c
			julia_in_one_file.cpp
		tarballs/
			julia-git-${JULIA_GIT_VER}.zip
			site.backup-${SITE_DATE}.zip
	- after building:
		build/
		backup/
			julia_root-git-${BUILD_VER}.zip
			julia_in_one_file-${BUILD_VER}{.exe}
		julia_in_one_file{.exe}

	+ Append to ELF/EXE KGB archive, and then append archive size.

	- Try to find out will binary work on all platforms and how it depends
		on glibc version and if not how they compile it not to depend.

